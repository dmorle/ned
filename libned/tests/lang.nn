#enum Type:
#    float64
#    float32
#    float16
#
#struct Value:
#    str name
#    Type ty
#
#enum Instr:
#    iadd:
#        Value lhs
#        Value rhs
#    ret:
#        Value ret
#    jmp:
#        Block tgt
#    br:
#        Value cond
#        Block true_branch
#        Block false_branch
#
#struct Block:
#    str name
#    array<Instr>
#
#struct Node:
#    Node next
#    int data
#
#struct LinkedList:
#    Node head
#    int size

enum Message:
    quit
    move:
        int dx
        int dy
    write:
        str message

fn msg_str(const Message msg) -> str:
    match msg:
        quit:
            return "quit"
        move:
            return "move(" + str::dx + ", " + str::dy + ")"
        write:
            return "message(" + message + ")"

fn msg_is_quit(const Message msg) -> bool:
    match msg:
        quit:
            print "I quit!"
            return true
        else:
            return false

enum Simp:
    one
    two
    three

fn print_simp(const Simp simp):
    match simp:
        one:
            print "one"
        two:
            print "two"
        three:
            print "three"
    return void

fn get_message() -> array<Message>:
    return [
        Message.quit,
        Message.move(1, 1)
    ]

fn main():
    Simp s = Simp.one
    print_simp(s)

    ref msgs = get_message()
    for ref msg in msgs:
        print msg_str(msg)

    return void

def model():
    main()
    return void
