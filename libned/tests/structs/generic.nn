fn print(const str msg):
	:begin
		dup 0
		dsp
		ret

struct Node<type S>:
    Node<S> next
    S data

struct LinkedList<type T>:
    Node<T> head
    int size

fn ll_new<type U>() -> LinkedList<U>:
    Node<U> head
    return LinkedList(head, 0)

fn impl_append<type T>(int idx, ref Node<T> nd, ref T val):
    print("Entered impl_append")
    if idx == 0:
        print("idx == 0")
        Node<T> tail
        nd = Node(tail, val)
        return void

    print("idx != 0")
    impl_append(idx - 1, nd.next, val)
    return void

fn ll_append<type T>(ref LinkedList<T> self, ref T val):
    print("Entered ll_append")
    impl_append(self.size, self.head, val)
    self.size += 1
    return void

fn impl_str(int idx, ref Node<int> nd) -> str:
    print("Entered impl_str")
    if idx == 1:
        return str::nd.data
    else:
        return str::nd.data + ", " + impl_str(idx - 1, nd.next)

fn ll_str(const LinkedList<int> self) -> str:
    if self.size == 0:
        return "LinkedList()"
    print("Entered ll_str")
    return "LinkedList(" + impl_str(self.size, self.head) + ")"

fn idn<type T>(ref T val) -> T:
    return val

fn main():
    ref lst = ll_new<int>()

    ll_append(lst, 1)
    print(str::lst.size)
    print("")
    ll_append(lst, 2)
    print(str::lst.size)
    print("")
    print(ll_str(lst))

    print(str::idn(lst.head.next.data))

    return void

def model():
    main()
    return void
