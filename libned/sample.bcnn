.proc min  # fn min<type T>(T left, T right) -> T:
    # if left < right:
    dup   2           # Duplicating left (stack: pc, right, left, T)
    dup   2           # Duplicating right (stack: left, pc, right, left, T)
    dup   5           # Duplicating T (stack: right, left, pc, right, left, T)
    lt
    brf   end

    # return left
    dup   2           # Duplicating left (stack: pc, right, left, T)
    ret   1

:end
    # return right
    dup   1           # Duplicating right (stack: pc, right, left, T)
    ret   1

.proc max  # fn max<type T>(T left, T right) -> T
    # if left > right:
    dup   2           # Duplicating left (stack: pc, right, left, T)
    dup   2           # Duplicating right (stack: left, pc, right, left, T)
    dup   5           # Duplicating T (stack: right, left, pc, right, left, T)
    gt
    brf   end

    # return left
    dup   2           # Duplicating left (stack: pc, right, left, T)
    ret   1

:end
    # return right
    dup   1           # Duplicating right (stack: pc, right, left, T)
    ret   1

.proc range:  # fn range(int n) -> array<int>
    # array<int> result
    agg   0

    # int i = 0
    new   int 0       # Pushing 0 onto the stack

    # while i < n:
:loop
    dup   0           # Duplicating i
    dup   4           # Duplicating n (stack: i, i, result, pc, n)
    new   type int
    lt                # Checking the less than condition
    brf   end         # While loop condition

    # result += [i]
    dup   1           # Duplicating result
    dup   1           # Duplicating i
    agg   1           # Creating [i]
    new   type int
    arr
    iadd              # Computing result += [i]

    # i += 1
    dup   0           # Duplicating i
    new   int 1       # Pushing 1 onto the stack
    new   type int
    iadd              # Computing i + 1

    jmp   loop        # Looping

:end
    # return result
    pop   0           # Removing i from the stack
    ret   1           # Returning the array

#.fn zip<type T, type U>(array<T>, array<U>) -> array<tuple<T, U>>:
#    # array<tuple<T, U>> result
#    dup   3
#    dup   3
#    new   type tuple
#    carg  2
#    new   type array
#    carg  1
#    inst
#
#    # for int i in range(min(len(arr1), len(arr2))):
#    dup   2           # range(min(len(arr1), len(arr2)))
#    len
#    dup   2
#    len
#    new   fn min
#    call
#    new   fn range
#    call
#    dup   0           # Finding the length of the iterable
#    len
#    new   int 0       # Creating a variable to iterate through the iterable
#    new   type int    # int i
#    inst
#:loop
#    dup   2           # Exit condition
#    dup   2
#    eq
#    brt   end
#    dup   3           # Getting the element from the iterable
#    dup   2
#    idx
#    set               # Setting it to the declared iterator (Top of stack)
#
#
#:end

struct node2<type T>:
    node1<T> nd

struct node1<type T>:
    node2<T> nd

fn map<type T>(T val) -> T:
    node1<T> t
    return map(t)

    dup   2
    call  node1

    aty   0  # t.nd
    aty   1  # t
    dup   1
    set


fn test():
    int i
    map(i)

.proc node  # struct node<type T>
    # T val
    dup   1
    inst

    # bool has_val
    new   bool false

    # node<T> next
    agg   0

    agg   3
    ret   1

.proc list
    # struct list<type T>
    # node<T> root
    agg   0

    # int size
    new   type int
    inst

    agg   2
    ret   1

.proc create  # fn create<type T>() -> list<T>
    # list<T> arr
    dup   1
    new   proc list
    call
    pop   1

    # node<T> head
    dup   1
    new   proc node
    call
    pop   1

    # arr.root = head
    dup   1
    new   int 0
    idx
    dup   1
    # building the type for struct node<T>
    dup   5
    new   type bool
    aty   0
    aty   3
    set

    # arr.size = 0
    dup   1
    new   int 1       # Size is the first element of the list struct
    idx
    new   int 0
    new   type int
    set

    # return arr
    # Some of these instruction are redundant, but this is what it will compile to
    dup   1
    pop   1
    pop   1
    ret   1
