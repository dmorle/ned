import mathtools

fn range(int n) -> array<int>:
    i = 0
    array<int> result
    while i < n:
        result += [i]
        i += 1
    return result

fn enumerate<type T>(array<T> arr) -> array<tuple<int, T>>:
    array<tuple<int, T>> result
    for i in range(len(arr)):
        result += [(i, arr[i])]
    return result

fn zip<type T>(array<T> arr) -> array<T>:
    return arr

fn zip<type T1, type T2>(array<T1> arr1, array<T2> arr2) -> array<tuple<T1, T2>>:
    array<tuple<T1, T2>> result
    for i in range(min(len(arr1), len(arr2))):
        result += [(lhs[i], rhs[i])]
    return result

fn zip<type T1, type T2, type T3>(array<T1> arr1, array<T2> arr2, array<T3> arr3) -> array<tuple<T1, T2, T3>>:
    array<tuple<T1, T2, T3>> result
    for i in range(min(len(arr1), len(arr2), len(arr3))):
        result += [(arr1[i], arr2[i], arr3[i])]
    return result
